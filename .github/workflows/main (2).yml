name: inspect_point_ai_dataintegration
on:
  push:
    branches:
      - main
jobs:
  docker_cicd:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   
      contents: read  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::363599561008:role/GitHubActionsDeploymentRole
          aws-region: eu-north-1
          role-session-name: GitHubActionsSession


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: testing_repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image to Amazon ECR..."
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy Lambda Function
        env:
          FUNCTION_NAME: inspect_point_ai_dataintegration
          IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/inspect_point_ai_dataintegration:${{ github.sha }}
          AWS_REGION: eu-north-1
        run: |1
          echo "Retrieving AWS Account ID..."
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS Account ID: $ACCOUNT_ID"

          echo "Checking if Lambda function exists..."
          if aws lambda get-function --function-name $FUNCTION_NAME; then
            echo "Function exists. Updating..."
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --image-uri $IMAGE_URI
          else
            echo "Function does not exist. Creating..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --role arn:aws:iam::$ACCOUNT_ID:role/GitHubActionsDeploymentRole \
              --package-type Image \
              --code ImageUri=$IMAGE_URI \
              --environment Variables="{OPENAI_API_KEY=placeholder,MODEL=placeholder,POSTGRES_DATABASE=placeholder,POSTGRES_HOST=placeholder,POSTGRES_PORT=placeholder,POSTGRES_USER=placeholder,POSTGRES_PASSWORD=placeholder,AWS_STORAGE_BUCKET_NAME=placeholder,AWS_S3_REGION_NAME=placeholder,AWS_ACCESS_KEY_ID_=placeholder,AWS_SECRET_ACCESS_KEY_=placeholder}" \
              --timeout 900 \
              --memory-size 1024 \
              --region $AWS_REGION
          fi

      - name: Add S3 Trigger
        env:
          FUNCTION_NAME: inspect_point_ai_dataintegration
          S3_BUCKET_NAME: deficiency-reports
          S3_EVENT_SUFFIX: .pdf
          AWS_REGION: eu-north-1
        run: |
          echo "Granting S3 permission to invoke the Lambda function..."
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          aws lambda add-permission \
            --function-name $FUNCTION_NAME \
            --statement-id s3-trigger \
            --action lambda:InvokeFunction \
            --principal s3.amazonaws.com \
            --source-arn arn:aws:s3:::$S3_BUCKET_NAME \
            --source-account $ACCOUNT_ID || echo "Permission already exists."

          echo "Adding S3 trigger for bucket: $S3_BUCKET_NAME and suffix: $S3_EVENT_SUFFIX..."
          aws s3api put-bucket-notification-configuration \
            --bucket $S3_BUCKET_NAME \
            --notification-configuration '{
              "LambdaFunctionConfigurations": [
                {
                  "LambdaFunctionArn": "arn:aws:lambda:'"$AWS_REGION"':'"$ACCOUNT_ID"':function:'"$FUNCTION_NAME"'",
                  "Events": ["s3:ObjectCreated:Put"],
                  "Filter": {
                    "Key": {
                      "FilterRules": [
                        {"Name": "suffix", "Value": ".pdf"}
                      ]
                    }
                  }
                }
              ]
            }'

          echo "S3 trigger added and implemented successfully."
